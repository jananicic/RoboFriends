{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","element","i","components_Card","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","ispending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initStateSearch","initStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","console","log","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","react_redux_es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.18eac432.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt={name} src={`https://robohash.org/${id}/200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n           {\n            robots.map((element, i) => {\n                return < Card \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}\n                />\n            })\n           }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchchange}) => {\n    return(\n        <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' placeholder='search robots' \n            onChange={searchchange}\n        />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px black solid', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => ({\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.ispending,\n    error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n    \n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return(\n            isPending ? <h1>LOADING!</h1> :\n            <div className='tc'>\n                <h1>RoboFriends</h1>\n                <SearchBox searchchange={onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>    \n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n\n/*export const requestRobots = () => ({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: [{\n        name: 'bla'\n    }]\n})*/","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initStateRobots, action = {}) => {\n    console.log('payload ' + action.payload);\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n, document.getElementById('root'));"],"sourceRoot":""}